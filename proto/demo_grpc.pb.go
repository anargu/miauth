// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package miauth_proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MiAuthClient is the client API for MiAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiAuthClient interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	VerifyToken(ctx context.Context, in *ValidationInput, opts ...grpc.CallOption) (*ValidationResult, error)
}

type miAuthClient struct {
	cc grpc.ClientConnInterface
}

func NewMiAuthClient(cc grpc.ClientConnInterface) MiAuthClient {
	return &miAuthClient{cc}
}

func (c *miAuthClient) VerifyToken(ctx context.Context, in *ValidationInput, opts ...grpc.CallOption) (*ValidationResult, error) {
	out := new(ValidationResult)
	err := c.cc.Invoke(ctx, "/server_with_grpc.MiAuth/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiAuthServer is the server API for MiAuth service.
// All implementations must embed UnimplementedMiAuthServer
// for forward compatibility
type MiAuthServer interface {
	// A simple RPC.
	//
	// Obtains the feature at a given position.
	//
	// A feature with an empty name is returned if there's no feature at the given
	// position.
	VerifyToken(context.Context, *ValidationInput) (*ValidationResult, error)
	mustEmbedUnimplementedMiAuthServer()
}

// UnimplementedMiAuthServer must be embedded to have forward compatible implementations.
type UnimplementedMiAuthServer struct {
}

func (UnimplementedMiAuthServer) VerifyToken(context.Context, *ValidationInput) (*ValidationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedMiAuthServer) mustEmbedUnimplementedMiAuthServer() {}

// UnsafeMiAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiAuthServer will
// result in compilation errors.
type UnsafeMiAuthServer interface {
	mustEmbedUnimplementedMiAuthServer()
}

func RegisterMiAuthServer(s *grpc.Server, srv MiAuthServer) {
	s.RegisterService(&_MiAuth_serviceDesc, srv)
}

func _MiAuth_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiAuthServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server_with_grpc.MiAuth/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiAuthServer).VerifyToken(ctx, req.(*ValidationInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _MiAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server_with_grpc.MiAuth",
	HandlerType: (*MiAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyToken",
			Handler:    _MiAuth_VerifyToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}
